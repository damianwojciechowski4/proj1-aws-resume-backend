# This is a basic workflow to help you get started with Actions
name: "Connect to an AWS role from a GitHub  repository and test TF code"
on:
  push:
    branches: 
      - main
  # merge changes from one branch into main
  pull_request:
    branches: 
      - main
# Permission can be added at job level or workflow level   
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: read    # This is required for actions/checkout

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Git clone the repository
      uses: actions/checkout@
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1.7.0
      with:
        role-to-assume: ${{ secrets.AWS_ROLE }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-session-name: GitHub_to_AWS_via_FederatedOIDC
    - name: Sts GetCallerIdentity
      run: |
        aws sts get-caller-identity
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.2.5
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Init
      id: init
      env:
        AWS_BUCKET_NAME: ${{ secrets.AWS_BUCKET_NAME }}
        AWS_BUCKET_KEY_NAME: ${{ secrets.AWS_BUCKET_KEY_NAME }}
      run: terraform init -backend-config="bucket=${AWS_BUCKET_NAME}" -backend-config="key=${AWS_BUCKET_KEY_NAME}" -backend-config="region=${AWS_REGION    
    - name: Terraform Validate
      id: validate
      run: terraform validate -no-col    
    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color
      if: github.event_name == 'pull_request'
      continue-on-error: tr    
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>
          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`
          </details>
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          </details>
          *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1